#version 450

struct Material {
	sampler2D diffuse;
	sampler2D specular;
    float shininess;
}; 
uniform Material material;

//exemple : sun light
struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
//only one allowed
uniform DirLight dirLight;
//declaration corresponding function
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);  


//exemple : simple lamp
struct PointLight {
    vec3 position;
    
    //attenuation of the light
    float constant;
    float linear;
    float quadratic;  
    
    //color specs of the light
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
#define NR_POINT_LIGHTS 1
uniform PointLight pointLights[1];
//prototype
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);  


out vec4 out_Color;
in vec3 norm;
in vec3 fragmentPos;
in vec2 textCoords;
uniform vec3 viewPos;

void main()
{
    // properties
    vec3 viewDir = normalize(viewPos - fragmentPos);

    // phase 1: Directional lighting
    vec3 result = vec3(0,0,0);
	result = CalcDirLight(dirLight, norm, viewDir);
    // phase 2: Point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
		result += CalcPointLight(pointLights[i], norm, fragmentPos, viewDir);
    
    out_Color = vec4(result, 1.0);
}



//directional light
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
	if(light.direction != vec3(0,0,0)){
		vec3 lightDir = normalize(-light.direction);
		// diffuse shading
		float diff = max(dot(normal, lightDir), 0.0);
		// specular shading
		vec3 reflectDir = reflect(-lightDir, normal);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
		// combine results
		vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, textCoords));
		vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, textCoords));
		vec3 specular = light.specular * spec * vec3(texture(material.specular, textCoords));
		return (ambient + diffuse + specular);
	}
}

//point light
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, textCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, textCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, textCoords));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 