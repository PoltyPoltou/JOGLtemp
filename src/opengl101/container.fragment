#version 450

out vec4 out_Color;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


in vec3 norm;
in vec3 fragmentPos;
in vec2 textCoords;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
    // ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, textCoords));
  	
    // diffuse 
    vec3 lightDir = normalize(light.position - fragmentPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, textCoords));
    
    // specular
    vec3 viewDir = normalize(viewPos - fragmentPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, textCoords));  
        
    vec3 result = ambient + diffuse + specular;
    out_Color = vec4(result, 1.0);
}

