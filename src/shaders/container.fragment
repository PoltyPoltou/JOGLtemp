#version 450 

struct Material {
	sampler2D diffuse;
	sampler2D specular;
    float shininess;
}; 
uniform Material material;

//exemple : sun light
struct DirLight {
    vec3 direction;
	vec3 color;
    vec3 attenuation;
    vec3 intensity;
	
	//shadow depth buffer test
	sampler2D shadowMap;
};
//only one allowed
uniform DirLight dirLight;
//declaration corresponding function
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 fragPos, vec3 viewDir);  


//exemple : simple lamp
struct PointLight {
    vec3 position;
    vec3 color;
    //attenuation of the light
    vec3 attenuation; 
    
    //color specs of the light
    vec3 intensity;
	
	//shadow depth buffer test
	//sampler2D shadowMap;
};
#define MAX_LIGHTS 100
uniform PointLight pointLights[100];
uniform int nbLights = 1;
//prototype
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);  


out vec4 out_Color;
in vec4 fragmentPosLightSpace;
in vec3 norm;
in vec3 fragmentPos;
in vec2 textCoords;

uniform vec3 viewPos;


//prototype for shadow calculation
float dirLightShadowCalculation(vec4 fragPosFromLight, vec3 lightDir , vec3 normal);
void main()
{
    // properties
    vec3 viewDir = normalize(viewPos - fragmentPos);
    // phase 1: Directional lighting
	vec3 result = CalcDirLight(dirLight, norm,fragmentPos, viewDir);
    // phase 2: Point lights
    for(int i = 0; i < nbLights; i++){
		result += CalcPointLight(pointLights[i], norm, fragmentPos, viewDir);
	}
    out_Color = vec4(result, 1.0);
	
	float gamma = 2.2;
    out_Color.rgb = pow(out_Color.rgb, vec3(1.0/gamma));
}


//directional light
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	
		vec3 lightDir = normalize(-light.direction);
		// diffuse shading
		float diff = max(dot(normal, lightDir), 0.0);
		// specular shading
		vec3 reflectDir = reflect(-lightDir, normal);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
		// attenuation
		float distance    = 100;
		float attenuation = 1.0 / (light.attenuation.x + light.attenuation.y * distance + light.attenuation.z * (distance * distance));    
		// combine results
		vec3 ambient  = light.intensity.x  * vec3(texture(material.diffuse, textCoords));
		vec3 diffuse  = light.intensity.y  * diff * vec3(texture(material.diffuse, textCoords));
		vec3 specular = light.intensity.z  * spec * vec3(texture(material.specular, textCoords));
		ambient  *= attenuation;
		diffuse  *= attenuation;
		specular *= attenuation;
		float shadow = dirLightShadowCalculation(fragmentPosLightSpace,lightDir,normal);//0 = light, 1 = shadow
		float shadowFactor = 1 - shadow;
		return (ambient + shadowFactor*(diffuse + specular))*light.color;
	
}

//point light
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading (Blinn-Phong)
	vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.attenuation.x + light.attenuation.y * distance + light.attenuation.z * (distance * distance));    
    // combine results
    vec3 ambient  = light.intensity.x  * vec3(texture(material.diffuse, textCoords));
    vec3 diffuse  = light.intensity.y  * diff * vec3(texture(material.diffuse, textCoords));
    vec3 specular = light.intensity.z * spec * vec3(texture(material.specular, textCoords));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular)*light.color;
} 


//shadow calculation for directional light
float dirLightShadowCalculation(vec4 fragPosFromLight, vec3 lightDir , vec3 normal){
	float shadow;
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);  
    vec3 projCoords = fragPosFromLight.xyz / fragPosFromLight.w; //make things orthogonal (range -1;1)
	projCoords = 0.5*(projCoords+1); // put back to range 0;1
	float closestDepth = texture(dirLight.shadowMap, projCoords.xy).r;   
	float currentDepth = projCoords.z; //take depth
	if(currentDepth > 1.0){
		shadow = 0;
		return shadow;
	}
	shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
	return shadow;
}
